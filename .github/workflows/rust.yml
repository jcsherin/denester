name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Environment variables available to all jobs and steps in the workflow
env:
  CARGO_TERM_COLOR: always # Ensure cargo output uses colors

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Rust toolchain using the official action by dtolnay
      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          # Components to install besides rustc and cargo
          # Add 'clippy', 'rustfmt' if not included by default with the stable toolchain
          components: clippy, rustfmt

      # 3. Cache dependencies to speed up subsequent runs
      # Caches ~/.cargo and target directories
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          # Create a unique key based on the runner OS, toolchain, and Cargo.lock
          # If Cargo.lock changes, the cache key changes, forcing a dependency rebuild
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          # Restore keys are used if the primary key doesn't match exactly
          restore-keys: |
            ${{ runner.os }}-cargo-

      # 4. Check formatting
      - name: Check formatting
        run: cargo fmt --all -- --check

      # 5. Run Clippy lints
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings # Fail on warnings

      # 6. Run tests
      - name: Run tests
        run: cargo test --all-targets --verbose --features test-utils

      # 7. Build the project
      # Use --release for a release build check if desired
      - name: Build project
        run: cargo build --verbose

      # 8. Build documentation (optional, but good check)
      - name: Build documentation
        run: cargo doc --no-deps --all-features # --no-deps speeds it up
